
/* Name: numsabs.cc
 * Type: C++ program code file
 * Description:
 * 	Class definitions.
 * Header:
 *	"nums-abstract.h"
 * Function prototype:
 *	Class member methods.
 * Last modified date:
 * Fix:
 */

 /* Feature */
 /* Header */
#include"nums-abstract.h"

 /* Macro */
 /* Data */
 /* Function */

namespace nums {

  template<class T>
  numscale<T>::numscale():transBuffer_(128) {
    value_ = 0;
    combine = NULL;
    translate = NULL;
  }

  template<class T>
  numscale<T>::numscale(size_t bufflen): transBuffer_(bufflen) {
    value_ = 0;
    combine = NULL;
    translate = NULL;
  }

  template<class T>
  numscale<T>::~numscale() { }

  template<class T>
  template<class X>
  void numscale<t>::install_of_uninstall(int action,combineFunc<x> thefunc) {

    switch (action) {
    case INSTALL_COMBINE:
      combine = thefunc;
      break;

    case UNINSTALL_COMBINE:
      combine = NULL;
      break;

    default:
      // Unknown type.
    }

  }

  template<class T>
  template<class X>
  void numscale<T>::install_of_uninstall(int action,translateFunc<X> thefunc) {

    switch (action) {
    case INSTALL_TRANSLATE:
      translate = thefunc;
      break;

    case UNINSTALL_TRANSLATE:
      translate = NULL;
      break;

    default:
      // Unknown type.
    }
    

  }


  template<T>
  bool numscale<T>::doTranslate(int srcType,int desType,const string &target) {

    combineFunc<string> doCombine = NULL;
    translateFunc<string> doTranslate = NULL;

    switch (srcType) {
    case HEX:
      doCombine = (combine) ? combine : defaultCombineHex<string>;
      break;

    case OCT:
      doCombine = (combine) ? combine : defaultCombineOct<string>;
      break;

    case DEC:
      doCombine = (combine) ? combine : defaultCombineDec;
      break;

    case BIN:
      doCombine = (combine) ? combine : defaultCombineBin<string>;
      break;

    default:
      // unknown type.
      return false;
    }

    switch (desType) {
    case HEX:
      doTranslate = (translate) ? translate : defaultTranslateHex;
      break;

    case OCT:
      doTranslate = (translate) ? transalte : defaultTranslateOct;
      break;

    case DEC:
      doTranslate = (translate) ? translate : defaultTranslateDec;
      break;

    case BIN:
      doTranslate = (translate) ? translate : defaultTranslateBin;
      break;

    default:
      // unknown type.
      return false;
    }

    value_ = combine(target);
    transBuffer_ = translate();


    return true;
  }

  template<class T>
  bool numscale<T>::doTranslate(int srcType,int desType,const int &target) {

    combineFunc<string> doCombine = NULL;
    translateFunc<string> doTranslate = NULL;

    switch (srcType) {
    case HEX:
      doCombine = (static_cast<combineFunc<int>>(combine)) ? static_cast<combineFunc<int>>(combine) : defaultCombineHex<int>;
      break;

    case OCT:
      doCombine = (static_cast<combineFunc<int>>(combine)) ? static_cast<combineFunc<int>>(combine) : defaultCombineOct<int>;
      break;

    case DEC:
      doCombine = (static_cast<combineFunc<int>>(combine)) ? static_cast<combineFunc<int>>(combine) : defaultCombineDec;
      break;

    case BIN:
      doCombine = (static_cast<combineFunc<int>>(combine)) ? static_cast<combineFunc<int>>(combine) : defaultCombineBin<int>;
      break;

    default:
      // unknown type.
      return false;
    }

    switch (desType) {
    case HEX:
      doTranslate = (translate) ? translate : defaultTranslateHex;
      break;

    case OCT:
      doTranslate = (translate) ? transalte : defaultTranslateOct;
      break;

    case DEC:
      doTranslate = (translate) ? translate : defaultTranslateDec;
      break;

    case BIN:
      doTranslate = (translate) ? translate : defaultTranslateBin;
      break;

    default:
      // unknown type.
      return false;
    }

    value_ = combine(target);
    transBuffer_ = translate();


    return true;

  }

}
